{
    "meta": {
      "layouts": {
        "presentation": "view",
        "react-grid-layout": {
          "props": {
            "cols": 12,
            "margin": [
              10,
              20
            ],
            "rowHeight": 100,
            "containerPadding": [
              5,
              5
            ]
          },
          "layout": [
            {
              "h": 5,
              "i": "view",
              "w": 5,
              "x": 5,
              "y": 0,
              "moved": false,
              "static": false
            },
            {
              "h": 2,
              "i": "device-io",
              "w": 5,
              "x": 0,
              "y": 0,
              "moved": false,
              "static": false
            }
          ]
        }
      },
      "description": "Get basic example of 3D rotation in babylon.js using phone orientation\n\nOne direction working!\n"
    },
    "version": "0.3",
    "metaframes": {
      "device-io": {
        "url": "https://superslides-router.glitch.me/superslides-output-visualization"
      },
      "view": {
        "url": "https://js.mtfm.io/?v=1&c=eyJtb2R1bGVzIjpbImh0dHBzOi8vY2RuLmJhYnlsb25qcy5jb20vYmFieWxvbi5qcyIsImh0dHBzOi8vY2RuLmJhYnlsb25qcy5jb20vbG9hZGVycy9iYWJ5bG9uanMubG9hZGVycy5taW4uanMiLCJodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9wZXAvMC40LjMvcGVwLmpzIl19&mfk=05a94esw70#?js=",
        "inputs": [
          {
            "source": "*",
            "target": "*",
            "metaframe": "device-io"
          }
        ]
      }
    },
    "plugins": [
      "https://mermaid.mtfm.io/#?button=hidden&menuhidden=true&tab=1",
      "https://editor.mtfm.io/#?options=eyJtb2RlIjoianNvbiIsInNhdmVsb2FkaW5oYXNoIjpmYWxzZSwidGhlbWUiOiJ2cy1kYXJrIn0="
    ]
  }